type Account {
	id: ID!
	accountId: UUID!
	code: String!
	name: String!
	normalBalanceType: DebitOrCredit!
	status: Status!
	externalId: String
	description: String
	tags: [TAG!]!
	metadata: JSON
}

type AccountConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AccountEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Account!]!
}

"""
An edge in a connection.
"""
type AccountEdge {
	"""
	The item at the end of the edge
	"""
	node: Account!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}


enum DebitOrCredit {
	DEBIT
	CREDIT
}

type EntryInput {
	entryType: Expression!
	accountId: Expression!
	layer: Expression!
	direction: Expression!
	units: Expression!
	currency: Expression!
	description: Expression
}

scalar Expression



type ImportJob {
	id: ID!
	importJobId: UUID!
	name: String!
	description: String
}

type ImportJobConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ImportJobEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [ImportJob!]!
}

input ImportJobCreateInput {
	name: String!
	description: String
	endpoint: String!
}

type ImportJobCreatePayload {
	importJob: ImportJob!
}

"""
An edge in a connection.
"""
type ImportJobEdge {
	"""
	The item at the end of the edge
	"""
	node: ImportJob!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}


scalar JSON

type Journal {
	id: ID!
	journalId: UUID!
	name: String!
	externalId: String
	status: Status!
	description: String
}

input JournalCreateInput {
	id: UUID
	name: String!
	externalId: String
	status: Status! = ACTIVE
	description: String
}

type JournalCreatePayload {
	journal: Journal!
}

type Mutation {
	hello: String!
	journalCreate(input: JournalCreateInput!): JournalCreatePayload!
	txTemplateCreate(input: TxTemplateCreateInput!): TxTemplateCreatePayload!
	importJobCreate(input: ImportJobCreateInput!): ImportJobCreatePayload!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

enum ParamDataType {
	STRING
	INTEGER
	DECIMAL
	BOOLEAN
	UUID
	DATE
	TIMESTAMP
	JSON
}

type ParamDefinition {
	name: String!
	type: ParamDataType!
	default: Expression
	description: String
}

input ParamDefinitionInput {
	name: String!
	type: ParamDataType!
	default: Expression
	description: String
}

type Query {
	accounts(first: Int!, after: String): AccountConnection!
	importJobs(first: Int!, after: String): ImportJobConnection!
}

enum Status {
	ACTIVE
	LOCKED
}


scalar TAG

type TxInput {
	effective: Expression!
	journalId: Expression!
	correlationId: Expression
	externalId: Expression
	description: Expression
	metadata: Expression
}

type TxTemplate {
	id: ID!
	txTemplateId: UUID!
	code: String!
	params: [ParamDefinition!]
	txInput: TxInput!
	entries: [EntryInput!]!
	description: String
	metadata: JSON
}

input TxTemplateCreateInput {
	id: UUID
	code: String!
	params: [ParamDefinitionInput!]
	txInput: TxTemplateTxInput!
	entries: [TxTemplateEntryInput!]!
	description: String
	metadata: JSON
}

type TxTemplateCreatePayload {
	txTemplate: TxTemplate!
}

input TxTemplateEntryInput {
	entryType: Expression!
	accountId: Expression!
	layer: Expression!
	direction: Expression!
	units: Expression!
	currency: Expression!
	description: Expression
}

input TxTemplateTxInput {
	effective: Expression!
	journalId: Expression!
	correlationId: Expression
	externalId: Expression
	description: Expression
	metadata: Expression
}

scalar UUID

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
