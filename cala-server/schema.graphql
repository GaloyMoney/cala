type Account {
	id: ID!
	accountId: UUID!
	code: String!
	name: String!
	normalBalanceType: DebitOrCredit!
	status: Status!
	externalId: String
	description: String
	tags: [TAG!]!
	metadata: JSON
}

type AccountConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AccountEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Account!]!
}

"""
An edge in a connection.
"""
type AccountEdge {
	"""
	The item at the end of the edge
	"""
	node: Account!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}


input CreateJournalInput {
	id: UUID
	name: String!
	externalId: String
	status: Status! = ACTIVE
	description: String
}

enum DebitOrCredit {
	DEBIT
	CREDIT
}




scalar JSON

type Journal {
	id: ID!
	journalId: UUID!
	name: String!
	externalId: String
	status: Status!
	description: String
}

type Mutation {
	createJournal(input: CreateJournalInput!): Journal!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Query {
	accounts(first: Int!, after: String): AccountConnection!
}

enum Status {
	ACTIVE
	LOCKED
}


scalar TAG

scalar UUID

schema {
	query: Query
	mutation: Mutation
}
