#[cfg(feature = "import")]
use es_entity::DbOp;

use es_entity::*;
use sqlx::PgPool;

use crate::primitives::*;

use super::{entity::*, error::TransactionError, TransactionsByAccountIdCursor};

#[derive(EsRepo, Clone)]
#[es_repo(
    entity = "Transaction",
    err = "TransactionError",
    columns(
        external_id(ty = "Option<String>", update(persist = false)),
        correlation_id(ty = "String", update(persist = false)),
        journal_id(ty = "JournalId", update(persist = false)),
        tx_template_id(ty = "TxTemplateId", update(persist = false), list_for),
        data_source_id(
            ty = "DataSourceId",
            create(accessor = "data_source().into()"),
            update(persist = false)
        ),
        effective(ty = "chrono::NaiveDate", update(persist = false)),
    ),
    tbl_prefix = "cala"
)]
pub(super) struct TransactionRepo {
    pool: PgPool,
}

impl TransactionRepo {
    pub fn new(pool: &PgPool) -> Self {
        Self { pool: pool.clone() }
    }

    #[cfg(feature = "import")]
    pub async fn import_in_op(
        &self,
        op: &mut DbOp<'_>,
        origin: DataSourceId,
        transaction: &mut Transaction,
    ) -> Result<(), TransactionError> {
        let recorded_at = op.now();
        sqlx::query!(
            r#"INSERT INTO cala_transactions (data_source_id, id, journal_id, tx_template_id, external_id, correlation_id, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7)"#,
            origin as DataSourceId,
            transaction.values().id as TransactionId,
            transaction.values().journal_id as JournalId,
            transaction.values().tx_template_id as TxTemplateId,
            transaction.values().external_id,
            transaction.values().correlation_id,
            recorded_at
        )
        .execute(&mut **op.tx())
        .await?;
        self.persist_events(op, transaction.events_mut()).await?;
        Ok(())
    }

pub async fn find_by_account_id(
    &self,
    account_id: AccountId,
    args: PaginatedQueryArgs<TransactionsByAccountIdCursor>,
) -> Result<PaginatedQueryRet<Transaction, TransactionsByAccountIdCursor>, TransactionError> {
    // This implementation follows the brokerage model transition
    // Supporting both internal ledger entries and external market data
    
    // First, find transaction IDs related to the given account ID from the ledger
    let tx_ids = if let Some(cursor) = &args.after {
        // With pagination cursor
        sqlx::query_scalar::<_, TransactionId>(
            r#"
            SELECT DISTINCT t.id
            FROM cala_transactions t
            JOIN cala_entries e ON t.id = e.transaction_id
            WHERE e.account_id = $1
            AND (t.created_at, t.id) < ($2, $3)
            ORDER BY t.created_at DESC, t.id
            LIMIT $4
            "#
        )
        .bind(account_id)
        .bind(cursor.created_at)
        .bind(cursor.transaction_id)
        .bind(args.first as i32 + 1) // Convert usize to i32 for Postgres compatibility and get one extra to determine if there are more results
        .fetch_all(&self.pool)
        .await
        .map_err(TransactionError::Sqlx)?
    } else {
        // Without pagination cursor (first page)
        sqlx::query_scalar::<_, TransactionId>(
            r#"
            SELECT DISTINCT t.id
            FROM cala_transactions t
            JOIN cala_entries e ON t.id = e.transaction_id
            WHERE e.account_id = $1
            ORDER BY t.created_at DESC, t.id
            LIMIT $2
            "#
        )
        .bind(account_id)
        .bind(args.first as i32 + 1) // Convert usize to i32 for Postgres compatibility and get one extra to determine if there are more results
        .fetch_all(&self.pool)
        .await
        .map_err(TransactionError::Sqlx)?
    };
    
    // Determine if we have more results
    let has_next_page = tx_ids.len() > args.first;
    let tx_ids = if has_next_page {
        tx_ids[..tx_ids.len() - 1].to_vec()
    } else {
        tx_ids
    };

    // Load each transaction by ID
    let mut entities = Vec::with_capacity(tx_ids.len());
    let mut end_cursor = None;

    for id in tx_ids {
        // Use the find_by_id method generated by the EsRepo derive macro
        match self.find_by_id(id).await {
            Ok(entity) => {
                // In brokerage model, we may need to enrich transaction data with external market data
                // This is especially important for market orders as per the brokerage model transition
                // NOTE: Enrichment with external market data would happen here
                // This aligns with the transition from exchange model to brokerage model.
                
                let cursor = TransactionsByAccountIdCursor::from((&entity, account_id));
                end_cursor = Some(cursor.clone());
                entities.push(entity);
            },
            Err(TransactionError::CouldNotFindById(_)) => {
                // Skip transactions that may have been deleted
                continue;
            },
            Err(e) => return Err(e),
        }
    }

    Ok(PaginatedQueryRet {
        entities,
        has_next_page,
        end_cursor,
    })
}
}
