"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[413],{9062:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=t(4848),r=t(8453);const o={id:"tx-template-create",title:"Create a transaction template",slug:"/demo/tx-template-create"},s=void 0,i={id:"demo/tx-template-create",title:"Create a transaction template",description:"",source:"@site/docs/demo/tx-template-create.mdx",sourceDirName:"demo",slug:"/demo/tx-template-create",permalink:"/docs/demo/tx-template-create",draft:!1,unlisted:!1,editUrl:"https://github.com/GaloyMoney/cala/edit/main/docs/demo/tx-template-create.mdx",tags:[],version:"current",frontMatter:{id:"tx-template-create",title:"Create a transaction template",slug:"/demo/tx-template-create"}},c={},d=[];function p(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:'function AccountCreate() {\n  const apiEndpoint = "http://localhost:8080/graphql";\n  const [response, setResponse] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const journal_id = "1ad17957-6e4e-48a3-8040-1165b2117341";\n  const asset_account_id = "30e7eefb-b47c-4f14-b837-c3f936a7a31e";\n\n  const operation = `\n    mutation CreateDepositAndWithdrawalTxTemplates($depositTemplateId: UUID!, $depositTemplateCode: String!, $withdrawalTemplateId: UUID!, $withdrawalTemplateCode: String!, $journalId: Expression!, $assetAccountId: Expression!) {\n      depositTemplate: txTemplateCreate(\n        input: {\n          txTemplateId: $depositTemplateId\n          code: $depositTemplateCode\n          description: "An ACH credit into a customer account."\n          params: [\n            { name: "account", type: UUID, description: "Deposit account ID." }\n            {\n              name: "amount"\n              type: DECIMAL\n              description: "Amount with decimal, e.g. \'1.23\'."\n            }\n            {\n              name: "effective"\n              type: DATE\n              description: "Effective date for transaction."\n            }\n          ]\n          txInput: {\n            journalId: $journalId\n            effective: "params.effective"\n          }\n          entries: [\n            {\n              accountId: $assetAccountId\n              units: "params.amount"\n              currency: "\'USD\'"\n              entryType: "\'ACH_DR\'"\n              direction: "DEBIT"\n              layer: "SETTLED"\n            }\n            {\n              accountId: "params.account"\n              units: "params.amount"\n              currency: "\'USD\'"\n              entryType: "\'ACH_CR\'"\n              direction: "CREDIT"\n              layer: "SETTLED"\n            }\n          ]\n        }\n      ) {\n        txTemplate{\n          txTemplateId\n        }\n      }\n\n      withdrawalTemplate: txTemplateCreate(\n        input: {\n          txTemplateId: $withdrawalTemplateId\n          code: $withdrawalTemplateCode\n          description: "An ACH debit into a customer account."\n          params: [\n            { name: "account", type: UUID, description: "Withdraw account ID." }\n            {\n              name: "amount"\n              type: DECIMAL\n              description: "Amount with decimal, e.g. \'1.23\'."\n            }\n            {\n              name: "effective"\n              type: DATE\n              description: "Effective date for transaction."\n            }\n          ]\n          txInput: {\n            journalId: $journalId\n            effective: "params.effective"\n          }\n          entries: [\n            {\n              accountId: $assetAccountId\n              units: "params.amount"\n              currency: "\'USD\'"\n              entryType: "\'ACH_CR\'"\n              direction: "CREDIT"\n              layer: "SETTLED"\n            }\n            {\n              accountId: "params.account"\n              units: "params.amount"\n              currency: "\'USD\'"\n              entryType: "\'ACH_DR\'"\n              direction: "DEBIT"\n              layer: "SETTLED"\n            }\n          ]\n        }\n      ) {\n        txTemplate{\n          txTemplateId\n        }\n      }\n    }\n  `;\n\n  function randomUUID() {\n    return crypto.randomUUID().toLowerCase();\n  }\n\n  const deposit_template_id = randomUUID();\n  const withdrawal_template_id = randomUUID();\n  const variables = {\n    depositTemplateId: deposit_template_id,\n    depositTemplateCode: `DEPOSIT-${deposit_template_id}`,\n    withdrawalTemplateId: withdrawal_template_id,\n    withdrawalTemplateCode: `withdrawal-${withdrawal_template_id}`,\n    assetAccountId: `uuid(\'${asset_account_id}\')`,\n    journalId: `uuid(\'${journal_id}\')`,\n  };\n\n  const runOp = async () => {\n    try {\n      const headers = {\n        "Content-Type": "application/json",\n        Accept: "application/json",\n      };\n\n      const res = await fetch(apiEndpoint, {\n        method: "POST",\n        headers,\n        body: JSON.stringify({\n          query: operation,\n          variables,\n        }),\n      });\n      const result = await res.json();\n      if (result.errors) {\n        setErrorMessage(result.errors[0].message);\n      } else {\n        setResponse(result.data);\n      }\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={runOp}>Send the request</button>\n      <div style={{ marginTop: "10px" }}></div>\n      {errorMessage && (\n        <div style={{ color: "red" }}>Error: {errorMessage}</div>\n      )}\n      {response && (\n        <div>\n          <strong>Response:</strong>{" "}\n          <pre style={{ marginLeft: "10px" }}>\n            {JSON.stringify(response, null, 2)}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n}\n'})})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);